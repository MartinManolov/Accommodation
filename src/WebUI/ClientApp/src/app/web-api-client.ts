/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.13.2.0 (NJsonSchema v10.5.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IHotelsService {
    getAll(): Observable<HotelsListVm>;
    post(command: CreateHotelCommand): Observable<string>;
    get(id: string | null): Observable<HotelVm>;
    put(id: number, value: string): Observable<void>;
    delete(id: string | null): Observable<FileResponse>;
    getByCity(city: string | null): Observable<HotelVm>;
    getByCountry(country: string | null): Observable<HotelVm>;
}

@Injectable({
    providedIn: 'root'
})
export class HotelsService implements IHotelsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAll(): Observable<HotelsListVm> {
        let url_ = this.baseUrl + "/api/Hotels";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<HotelsListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<HotelsListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<HotelsListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HotelsListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HotelsListVm>(<any>null);
    }

    post(command: CreateHotelCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Hotels";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    get(id: string | null): Observable<HotelVm> {
        let url_ = this.baseUrl + "/api/Hotels/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<HotelVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<HotelVm>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<HotelVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HotelVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HotelVm>(<any>null);
    }

    put(id: number, value: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Hotels/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    delete(id: string | null): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Hotels/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse>(<any>null);
    }

    getByCity(city: string | null): Observable<HotelVm> {
        let url_ = this.baseUrl + "/api/Hotels/GetByCity/{city}";
        if (city === undefined || city === null)
            throw new Error("The parameter 'city' must be defined.");
        url_ = url_.replace("{city}", encodeURIComponent("" + city));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByCity(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByCity(<any>response_);
                } catch (e) {
                    return <Observable<HotelVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<HotelVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetByCity(response: HttpResponseBase): Observable<HotelVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HotelVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HotelVm>(<any>null);
    }

    getByCountry(country: string | null): Observable<HotelVm> {
        let url_ = this.baseUrl + "/api/Hotels/GetByCountry/{country}";
        if (country === undefined || country === null)
            throw new Error("The parameter 'country' must be defined.");
        url_ = url_.replace("{country}", encodeURIComponent("" + country));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByCountry(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByCountry(<any>response_);
                } catch (e) {
                    return <Observable<HotelVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<HotelVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetByCountry(response: HttpResponseBase): Observable<HotelVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = HotelVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<HotelVm>(<any>null);
    }
}

export interface IOffersService {
    getBySearch(parameter: string | null | undefined, checkIn: Date | null | undefined, checkOut: Date | null | undefined, people: number | null | undefined): Observable<OffersListVm>;
    get(id: string | null): Observable<OfferDto>;
    put(id: number, value: string): Observable<void>;
    delete(id: number): Observable<void>;
    getByHotelId(hotelId: string | null): Observable<OffersListVm>;
    post(command: CreateOfferCommand): Observable<string>;
}

@Injectable({
    providedIn: 'root'
})
export class OffersService implements IOffersService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getBySearch(parameter: string | null | undefined, checkIn: Date | null | undefined, checkOut: Date | null | undefined, people: number | null | undefined): Observable<OffersListVm> {
        let url_ = this.baseUrl + "/api/Offers/search?";
        if (parameter !== undefined && parameter !== null)
            url_ += "Parameter=" + encodeURIComponent("" + parameter) + "&";
        if (checkIn !== undefined && checkIn !== null)
            url_ += "CheckIn=" + encodeURIComponent(checkIn ? "" + checkIn.toJSON() : "") + "&";
        if (checkOut !== undefined && checkOut !== null)
            url_ += "CheckOut=" + encodeURIComponent(checkOut ? "" + checkOut.toJSON() : "") + "&";
        if (people !== undefined && people !== null)
            url_ += "People=" + encodeURIComponent("" + people) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBySearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBySearch(<any>response_);
                } catch (e) {
                    return <Observable<OffersListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<OffersListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetBySearch(response: HttpResponseBase): Observable<OffersListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OffersListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OffersListVm>(<any>null);
    }

    get(id: string | null): Observable<OfferDto> {
        let url_ = this.baseUrl + "/api/Offers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<OfferDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OfferDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<OfferDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OfferDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OfferDto>(<any>null);
    }

    put(id: number, value: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Offers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Offers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getByHotelId(hotelId: string | null): Observable<OffersListVm> {
        let url_ = this.baseUrl + "/api/Offers/GetByHotelId/{hotelId}";
        if (hotelId === undefined || hotelId === null)
            throw new Error("The parameter 'hotelId' must be defined.");
        url_ = url_.replace("{hotelId}", encodeURIComponent("" + hotelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetByHotelId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetByHotelId(<any>response_);
                } catch (e) {
                    return <Observable<OffersListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<OffersListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetByHotelId(response: HttpResponseBase): Observable<OffersListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OffersListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OffersListVm>(<any>null);
    }

    post(command: CreateOfferCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Offers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

export interface IReservationsService {
    get(id: string | null): Observable<UserReservationDto>;
    put(id: number, value: string): Observable<void>;
    delete(id: number): Observable<void>;
    getAllByUser(): Observable<UserReservationsListVm>;
    post(command: CreateReservationCommand): Observable<string>;
}

@Injectable({
    providedIn: 'root'
})
export class ReservationsService implements IReservationsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    get(id: string | null): Observable<UserReservationDto> {
        let url_ = this.baseUrl + "/api/Reservations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<UserReservationDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserReservationDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<UserReservationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserReservationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserReservationDto>(<any>null);
    }

    put(id: number, value: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Reservations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Reservations/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getAllByUser(): Observable<UserReservationsListVm> {
        let url_ = this.baseUrl + "/api/Reservations/GetAllByUser";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByUser(<any>response_);
                } catch (e) {
                    return <Observable<UserReservationsListVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<UserReservationsListVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByUser(response: HttpResponseBase): Observable<UserReservationsListVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserReservationsListVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<UserReservationsListVm>(<any>null);
    }

    post(command: CreateReservationCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Reservations";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }
}

export interface IRoomsService {
    getAll(): Observable<string[]>;
    post(command: CreateRoomCommand): Observable<string>;
    get(id: string | null): Observable<RoomDto>;
    put(id: number, value: string): Observable<void>;
    delete(id: number): Observable<void>;
    getbyHotelId(hotelId: string | null): Observable<RoomsVm>;
}

@Injectable({
    providedIn: 'root'
})
export class RoomsService implements IRoomsService {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getAll(): Observable<string[]> {
        let url_ = this.baseUrl + "/api/Rooms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<string[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<string[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<string[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(item);
            }
            else {
                result200 = <any>null;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string[]>(<any>null);
    }

    post(command: CreateRoomCommand): Observable<string> {
        let url_ = this.baseUrl + "/api/Rooms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPost(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPost(<any>response_);
                } catch (e) {
                    return <Observable<string>><any>_observableThrow(e);
                }
            } else
                return <Observable<string>><any>_observableThrow(response_);
        }));
    }

    protected processPost(response: HttpResponseBase): Observable<string> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<string>(<any>null);
    }

    get(id: string | null): Observable<RoomDto> {
        let url_ = this.baseUrl + "/api/Rooms/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGet(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGet(<any>response_);
                } catch (e) {
                    return <Observable<RoomDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomDto>><any>_observableThrow(response_);
        }));
    }

    protected processGet(response: HttpResponseBase): Observable<RoomDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoomDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomDto>(<any>null);
    }

    put(id: number, value: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Rooms/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(value);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPut(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPut(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processPut(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    delete(id: number): Observable<void> {
        let url_ = this.baseUrl + "/api/Rooms/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDelete(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDelete(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processDelete(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    getbyHotelId(hotelId: string | null): Observable<RoomsVm> {
        let url_ = this.baseUrl + "/api/Rooms/GetbyHotelId/{hotelId}";
        if (hotelId === undefined || hotelId === null)
            throw new Error("The parameter 'hotelId' must be defined.");
        url_ = url_.replace("{hotelId}", encodeURIComponent("" + hotelId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetbyHotelId(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetbyHotelId(<any>response_);
                } catch (e) {
                    return <Observable<RoomsVm>><any>_observableThrow(e);
                }
            } else
                return <Observable<RoomsVm>><any>_observableThrow(response_);
        }));
    }

    protected processGetbyHotelId(response: HttpResponseBase): Observable<RoomsVm> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = RoomsVm.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<RoomsVm>(<any>null);
    }
}

export class HotelsListVm implements IHotelsListVm {
    hotels?: HotelInListDto[] | undefined;

    constructor(data?: IHotelsListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["hotels"])) {
                this.hotels = [] as any;
                for (let item of _data["hotels"])
                    this.hotels!.push(HotelInListDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): HotelsListVm {
        data = typeof data === 'object' ? data : {};
        let result = new HotelsListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.hotels)) {
            data["hotels"] = [];
            for (let item of this.hotels)
                data["hotels"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IHotelsListVm {
    hotels?: HotelInListDto[] | undefined;
}

export class HotelInListDto implements IHotelInListDto {
    id?: string | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    rating?: number;
    country?: string | undefined;
    city?: string | undefined;

    constructor(data?: IHotelInListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.rating = _data["rating"];
            this.country = _data["country"];
            this.city = _data["city"];
        }
    }

    static fromJS(data: any): HotelInListDto {
        data = typeof data === 'object' ? data : {};
        let result = new HotelInListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["rating"] = this.rating;
        data["country"] = this.country;
        data["city"] = this.city;
        return data; 
    }
}

export interface IHotelInListDto {
    id?: string | undefined;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    rating?: number;
    country?: string | undefined;
    city?: string | undefined;
}

export class HotelVm implements IHotelVm {
    id?: string | undefined;
    name?: string | undefined;
    country?: string | undefined;
    latitude?: number;
    longitude?: number;
    city?: string | undefined;
    description?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    rating?: number;
    facilities?: string[] | undefined;
    reviews?: ReviewsListVm | undefined;
    offers?: OffersListVm | undefined;

    constructor(data?: IHotelVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.country = _data["country"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.city = _data["city"];
            this.description = _data["description"];
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.rating = _data["rating"];
            if (Array.isArray(_data["facilities"])) {
                this.facilities = [] as any;
                for (let item of _data["facilities"])
                    this.facilities!.push(item);
            }
            this.reviews = _data["reviews"] ? ReviewsListVm.fromJS(_data["reviews"]) : <any>undefined;
            this.offers = _data["offers"] ? OffersListVm.fromJS(_data["offers"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HotelVm {
        data = typeof data === 'object' ? data : {};
        let result = new HotelVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["country"] = this.country;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["city"] = this.city;
        data["description"] = this.description;
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["rating"] = this.rating;
        if (Array.isArray(this.facilities)) {
            data["facilities"] = [];
            for (let item of this.facilities)
                data["facilities"].push(item);
        }
        data["reviews"] = this.reviews ? this.reviews.toJSON() : <any>undefined;
        data["offers"] = this.offers ? this.offers.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IHotelVm {
    id?: string | undefined;
    name?: string | undefined;
    country?: string | undefined;
    latitude?: number;
    longitude?: number;
    city?: string | undefined;
    description?: string | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    rating?: number;
    facilities?: string[] | undefined;
    reviews?: ReviewsListVm | undefined;
    offers?: OffersListVm | undefined;
}

export class ReviewsListVm implements IReviewsListVm {
    reviews?: ReviewDto[] | undefined;

    constructor(data?: IReviewsListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["reviews"])) {
                this.reviews = [] as any;
                for (let item of _data["reviews"])
                    this.reviews!.push(ReviewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ReviewsListVm {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewsListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.reviews)) {
            data["reviews"] = [];
            for (let item of this.reviews)
                data["reviews"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IReviewsListVm {
    reviews?: ReviewDto[] | undefined;
}

export class ReviewDto implements IReviewDto {
    guestName?: string | undefined;
    content?: string | undefined;
    rating?: number;
    date?: Date;

    constructor(data?: IReviewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.guestName = _data["guestName"];
            this.content = _data["content"];
            this.rating = _data["rating"];
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): ReviewDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReviewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["guestName"] = this.guestName;
        data["content"] = this.content;
        data["rating"] = this.rating;
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IReviewDto {
    guestName?: string | undefined;
    content?: string | undefined;
    rating?: number;
    date?: Date;
}

export class OffersListVm implements IOffersListVm {
    offers?: OfferDto[] | undefined;

    constructor(data?: IOffersListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["offers"])) {
                this.offers = [] as any;
                for (let item of _data["offers"])
                    this.offers!.push(OfferDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): OffersListVm {
        data = typeof data === 'object' ? data : {};
        let result = new OffersListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.offers)) {
            data["offers"] = [];
            for (let item of this.offers)
                data["offers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IOffersListVm {
    offers?: OfferDto[] | undefined;
}

export class OfferDto implements IOfferDto {
    id?: string | undefined;
    roomId?: string | undefined;
    checkInDate?: Date;
    checkOutDate?: Date;
    nights?: number;
    pricePerNight?: number;
    wholePrice?: number;
    maxPeople?: number;
    remainingReservation?: number;

    constructor(data?: IOfferDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.roomId = _data["roomId"];
            this.checkInDate = _data["checkInDate"] ? new Date(_data["checkInDate"].toString()) : <any>undefined;
            this.checkOutDate = _data["checkOutDate"] ? new Date(_data["checkOutDate"].toString()) : <any>undefined;
            this.nights = _data["nights"];
            this.pricePerNight = _data["pricePerNight"];
            this.wholePrice = _data["wholePrice"];
            this.maxPeople = _data["maxPeople"];
            this.remainingReservation = _data["remainingReservation"];
        }
    }

    static fromJS(data: any): OfferDto {
        data = typeof data === 'object' ? data : {};
        let result = new OfferDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["roomId"] = this.roomId;
        data["checkInDate"] = this.checkInDate ? this.checkInDate.toISOString() : <any>undefined;
        data["checkOutDate"] = this.checkOutDate ? this.checkOutDate.toISOString() : <any>undefined;
        data["nights"] = this.nights;
        data["pricePerNight"] = this.pricePerNight;
        data["wholePrice"] = this.wholePrice;
        data["maxPeople"] = this.maxPeople;
        data["remainingReservation"] = this.remainingReservation;
        return data; 
    }
}

export interface IOfferDto {
    id?: string | undefined;
    roomId?: string | undefined;
    checkInDate?: Date;
    checkOutDate?: Date;
    nights?: number;
    pricePerNight?: number;
    wholePrice?: number;
    maxPeople?: number;
    remainingReservation?: number;
}

export class CreateHotelCommand implements ICreateHotelCommand {
    name?: string | undefined;
    description?: string | undefined;
    facilities?: CreateFacilityCommand[] | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    cuntry?: string | undefined;
    city?: string | undefined;
    locationLatitude?: number;
    locationLongitude?: number;

    constructor(data?: ICreateHotelCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            if (Array.isArray(_data["facilities"])) {
                this.facilities = [] as any;
                for (let item of _data["facilities"])
                    this.facilities!.push(CreateFacilityCommand.fromJS(item));
            }
            this.phoneNumber = _data["phoneNumber"];
            this.email = _data["email"];
            this.cuntry = _data["cuntry"];
            this.city = _data["city"];
            this.locationLatitude = _data["locationLatitude"];
            this.locationLongitude = _data["locationLongitude"];
        }
    }

    static fromJS(data: any): CreateHotelCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateHotelCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        if (Array.isArray(this.facilities)) {
            data["facilities"] = [];
            for (let item of this.facilities)
                data["facilities"].push(item.toJSON());
        }
        data["phoneNumber"] = this.phoneNumber;
        data["email"] = this.email;
        data["cuntry"] = this.cuntry;
        data["city"] = this.city;
        data["locationLatitude"] = this.locationLatitude;
        data["locationLongitude"] = this.locationLongitude;
        return data; 
    }
}

export interface ICreateHotelCommand {
    name?: string | undefined;
    description?: string | undefined;
    facilities?: CreateFacilityCommand[] | undefined;
    phoneNumber?: string | undefined;
    email?: string | undefined;
    cuntry?: string | undefined;
    city?: string | undefined;
    locationLatitude?: number;
    locationLongitude?: number;
}

export class CreateFacilityCommand implements ICreateFacilityCommand {
    name?: string | undefined;

    constructor(data?: ICreateFacilityCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): CreateFacilityCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateFacilityCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        return data; 
    }
}

export interface ICreateFacilityCommand {
    name?: string | undefined;
}

export class CreateOfferCommand implements ICreateOfferCommand {
    hotelId?: string | undefined;
    roomId?: string | undefined;
    checkInDate?: Date;
    checkOutDate?: Date;
    maxReservations?: number;
    pricePerNight?: number;
    maxPeople?: number;

    constructor(data?: ICreateOfferCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"];
            this.roomId = _data["roomId"];
            this.checkInDate = _data["checkInDate"] ? new Date(_data["checkInDate"].toString()) : <any>undefined;
            this.checkOutDate = _data["checkOutDate"] ? new Date(_data["checkOutDate"].toString()) : <any>undefined;
            this.maxReservations = _data["maxReservations"];
            this.pricePerNight = _data["pricePerNight"];
            this.maxPeople = _data["maxPeople"];
        }
    }

    static fromJS(data: any): CreateOfferCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOfferCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId;
        data["roomId"] = this.roomId;
        data["checkInDate"] = this.checkInDate ? this.checkInDate.toISOString() : <any>undefined;
        data["checkOutDate"] = this.checkOutDate ? this.checkOutDate.toISOString() : <any>undefined;
        data["maxReservations"] = this.maxReservations;
        data["pricePerNight"] = this.pricePerNight;
        data["maxPeople"] = this.maxPeople;
        return data; 
    }
}

export interface ICreateOfferCommand {
    hotelId?: string | undefined;
    roomId?: string | undefined;
    checkInDate?: Date;
    checkOutDate?: Date;
    maxReservations?: number;
    pricePerNight?: number;
    maxPeople?: number;
}

export class UserReservationDto implements IUserReservationDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    hotelName?: string | undefined;
    hotelPhoneNumber?: string | undefined;
    hotelEmail?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    price?: number;
    nights?: number;
    checkIn?: Date;
    checkOut?: Date;

    constructor(data?: IUserReservationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.hotelName = _data["hotelName"];
            this.hotelPhoneNumber = _data["hotelPhoneNumber"];
            this.hotelEmail = _data["hotelEmail"];
            this.city = _data["city"];
            this.country = _data["country"];
            this.price = _data["price"];
            this.nights = _data["nights"];
            this.checkIn = _data["checkIn"] ? new Date(_data["checkIn"].toString()) : <any>undefined;
            this.checkOut = _data["checkOut"] ? new Date(_data["checkOut"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UserReservationDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserReservationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["hotelName"] = this.hotelName;
        data["hotelPhoneNumber"] = this.hotelPhoneNumber;
        data["hotelEmail"] = this.hotelEmail;
        data["city"] = this.city;
        data["country"] = this.country;
        data["price"] = this.price;
        data["nights"] = this.nights;
        data["checkIn"] = this.checkIn ? this.checkIn.toISOString() : <any>undefined;
        data["checkOut"] = this.checkOut ? this.checkOut.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IUserReservationDto {
    id?: string | undefined;
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    hotelName?: string | undefined;
    hotelPhoneNumber?: string | undefined;
    hotelEmail?: string | undefined;
    city?: string | undefined;
    country?: string | undefined;
    price?: number;
    nights?: number;
    checkIn?: Date;
    checkOut?: Date;
}

export class UserReservationsListVm implements IUserReservationsListVm {
    reservations?: UserReservationDto[] | undefined;

    constructor(data?: IUserReservationsListVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["reservations"])) {
                this.reservations = [] as any;
                for (let item of _data["reservations"])
                    this.reservations!.push(UserReservationDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserReservationsListVm {
        data = typeof data === 'object' ? data : {};
        let result = new UserReservationsListVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.reservations)) {
            data["reservations"] = [];
            for (let item of this.reservations)
                data["reservations"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IUserReservationsListVm {
    reservations?: UserReservationDto[] | undefined;
}

export class CreateReservationCommand implements ICreateReservationCommand {
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    offerId?: string | undefined;

    constructor(data?: ICreateReservationCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.email = _data["email"];
            this.phoneNumber = _data["phoneNumber"];
            this.offerId = _data["offerId"];
        }
    }

    static fromJS(data: any): CreateReservationCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReservationCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["email"] = this.email;
        data["phoneNumber"] = this.phoneNumber;
        data["offerId"] = this.offerId;
        return data; 
    }
}

export interface ICreateReservationCommand {
    firstName?: string | undefined;
    lastName?: string | undefined;
    email?: string | undefined;
    phoneNumber?: string | undefined;
    offerId?: string | undefined;
}

export class RoomDto implements IRoomDto {
    id?: string | undefined;
    sleeps?: number;
    size?: number;
    description?: string | undefined;
    view?: string | undefined;
    facilities?: string[] | undefined;
    offers?: OfferDto[] | undefined;

    constructor(data?: IRoomDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sleeps = _data["sleeps"];
            this.size = _data["size"];
            this.description = _data["description"];
            this.view = _data["view"];
            if (Array.isArray(_data["facilities"])) {
                this.facilities = [] as any;
                for (let item of _data["facilities"])
                    this.facilities!.push(item);
            }
            if (Array.isArray(_data["offers"])) {
                this.offers = [] as any;
                for (let item of _data["offers"])
                    this.offers!.push(OfferDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomDto {
        data = typeof data === 'object' ? data : {};
        let result = new RoomDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sleeps"] = this.sleeps;
        data["size"] = this.size;
        data["description"] = this.description;
        data["view"] = this.view;
        if (Array.isArray(this.facilities)) {
            data["facilities"] = [];
            for (let item of this.facilities)
                data["facilities"].push(item);
        }
        if (Array.isArray(this.offers)) {
            data["offers"] = [];
            for (let item of this.offers)
                data["offers"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoomDto {
    id?: string | undefined;
    sleeps?: number;
    size?: number;
    description?: string | undefined;
    view?: string | undefined;
    facilities?: string[] | undefined;
    offers?: OfferDto[] | undefined;
}

export class RoomsVm implements IRoomsVm {
    rooms?: RoomDto[] | undefined;

    constructor(data?: IRoomsVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["rooms"])) {
                this.rooms = [] as any;
                for (let item of _data["rooms"])
                    this.rooms!.push(RoomDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): RoomsVm {
        data = typeof data === 'object' ? data : {};
        let result = new RoomsVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.rooms)) {
            data["rooms"] = [];
            for (let item of this.rooms)
                data["rooms"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IRoomsVm {
    rooms?: RoomDto[] | undefined;
}

export class CreateRoomCommand implements ICreateRoomCommand {
    hotelId?: string | undefined;
    sleeps?: number;
    size?: number;
    description?: string | undefined;
    view?: string | undefined;
    facilities?: string[] | undefined;

    constructor(data?: ICreateRoomCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.hotelId = _data["hotelId"];
            this.sleeps = _data["sleeps"];
            this.size = _data["size"];
            this.description = _data["description"];
            this.view = _data["view"];
            if (Array.isArray(_data["facilities"])) {
                this.facilities = [] as any;
                for (let item of _data["facilities"])
                    this.facilities!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateRoomCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateRoomCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["hotelId"] = this.hotelId;
        data["sleeps"] = this.sleeps;
        data["size"] = this.size;
        data["description"] = this.description;
        data["view"] = this.view;
        if (Array.isArray(this.facilities)) {
            data["facilities"] = [];
            for (let item of this.facilities)
                data["facilities"].push(item);
        }
        return data; 
    }
}

export interface ICreateRoomCommand {
    hotelId?: string | undefined;
    sleeps?: number;
    size?: number;
    description?: string | undefined;
    view?: string | undefined;
    facilities?: string[] | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}